import java.util.Scanner;
import java.util.ArrayList;

public class HangaGubben {

	//Ord 1-3: lätt, 4-6: mellan, 7-9: svår.
	static String[] words = {"KAN", "FYR", "EK", "AFTON", "LJUD", "BIBLIOTEK", "ORANGE", "ULL", "INNAN"}; 
	static char[] fullWord;
	static char[] partWord;
	static ArrayList<Character> guessedLetters = new ArrayList<Character>();

	public static void main(String[] args) {

		Scanner input = new Scanner(System.in);
		char guessedLetter;
		int numberOfGuessesLeft;
		boolean isPlaying = true;
		
		//Denna while loopen körs till spelaren inte vill köra mer.
		while(isPlaying) {
			Welcome();
			
			int difficulty = AskPlayerDifficulty();
			
			int numberOfGuessesStart = 5 - difficulty;
			
			String dummyWord = words[(int)(3*(Math.random() + difficulty))];
			fullWord = new char[dummyWord.length()];
			partWord = new char[dummyWord.length()];
			
			for (int i = 0; i < fullWord.length; i++) {
				fullWord[i] = dummyWord.charAt(i);
				partWord[i] = '*';
			}
			
			//Denna for loopen körs om varje runda.
			for (numberOfGuessesLeft = numberOfGuessesStart; numberOfGuessesLeft > 0 && !TestIfPartWordEqualsFullWord(); numberOfGuessesLeft = numberOfGuessesLeft) {
				AsciiAndWordDisplay(numberOfGuessesLeft);
				
				for (int i = 0; i < partWord.length; i++) {
					System.out.print(partWord[i]);
				}
				System.out.println();
				
				AskPlayerToPickLetter(numberOfGuessesLeft, difficulty);
				
				//denna while loop har jag för att spelaren ska skriva en bokstav som är tillåten.
				while(true) {
					String dummyString = input.nextLine().toUpperCase();	
					
					if(dummyString.length() == 1) {
						guessedLetter = dummyString.charAt(0);
						if(!Character.isDigit(guessedLetter)) {
							if(TestIfLetterBeenGuessedBefore(guessedLetter)) {
								System.out.println("Du har redan valt denna bokstav");
							}
							else {
								guessedLetters.add(guessedLetter);
								break;
							}
						}
						else {
							System.out.println("Du måste välja en bokstav");
						}
					}
					else {
						System.out.println("Du behöver skriva enbart en bokstav.");
					}	
				}
	
				
				if(TestIfLetterInFullWord(guessedLetter)) {
					AddToPartWord(guessedLetter);
					System.out.println(guessedLetter + " finns med i ordet.");
				}
				else {
					numberOfGuessesLeft = RemoveOneGuess(numberOfGuessesLeft);
					//numberOfGuessesLeft = RemoveOneGuess(numberOfGuessesLeft);
					System.out.println(guessedLetter + " finns inte med i ordet");
				}
			}
			
			isPlaying = TestIfPlayerWantRestart(numberOfGuessesLeft);
			
			for (int i = guessedLetters.size() - 1; i >= 0; i--) {
				guessedLetters.remove(i);
			}
		}
	}
	
	/**
	 * Testar om bokstaven spelaren gissade på (guessedLetter) finns i ordet (fullWord).
	 * @param guessedLetter (bokstaven spelaren gissade på)
	 * @return true om guessedLetter är i fullWord. False om inte. 
	 */
	public static boolean TestIfLetterInFullWord(char guessedLetter) {
		
		for (int i = 0; i < fullWord.length; i++) {
			if(fullWord[i] == guessedLetter) {
				return true;
			}
		}
		return false;
	}
	
	/**
	 * Testar om man har hittat alla bokstäver i ordet.
	 * @return true om partWord = fullWord och false om partWord =/= fullWord
	 */
	public static boolean TestIfPartWordEqualsFullWord() {
		for (int i = 0; i < fullWord.length; i++) {
			if(fullWord[i] != partWord[i]) {
				return false;
			}
		}
		return true;
	}
	
	/**
	 * Lägger till bokstaven spelaren gissade på i ordet spelaren ser.
	 * @param guessedLetter är bokstaven spelaren gissade på.
	 */
	public static void AddToPartWord(char guessedLetter) {
		for (int i = 0; i < fullWord.length; i++) {
			if(fullWord[i] == guessedLetter) {
				partWord[i] = guessedLetter;
			}
		}
	}
	
	/**
	 * Lägg till bokstaven spelare gissade på i listan av bokstäver spelaren har gissat på.
	 * @param guessedLetter
	 */
	public static void AddToGuessedLetter(char guessedLetter) {
		guessedLetters.add(guessedLetter);
	}
	
	/**
	 * Säger till spelaren att den ska gissa på en bokstav.
	 * @param numberOfGuessesLeft är antalet gissningar kvar.
	 * @param difficulty är svårigheten.
	 */
	public static void AskPlayerToPickLetter(int numberOfGuessesLeft, int difficulty) {
		if(numberOfGuessesLeft == 5 - difficulty) {
			System.out.println("Skriv en bokstav");
		}
		else {
			System.out.println("Skriv en bokstav som du inte skrivit innan");
		}
	}
	
	/**
	 * Tar bort ett från numberOfGuessesLeft
	 * @param numberOfGuessesLeft är antalet gissningar spelaren har kvar.
	 * @return antalet gissningar spelaren ska ha.
	 */
	public static int RemoveOneGuess(int numberOfGuessesLeft) {
		return numberOfGuessesLeft - 1;
	}
	
	/**
	 * Säger till spelaren att välja en svårighetsgrad.
	 * @return svårighetsgraden i int form.
	 */
	public static int AskPlayerDifficulty() {
		Scanner input = new Scanner(System.in);
		
		System.out.println("Vilken svårighetsgrad vill du ha? (Lätt, mellan eller svår)");
		while (true) {
			String dummyString = input.nextLine();
			
			if(dummyString.toUpperCase().equals("LÄTT")) {
				return 0;
			}
			if(dummyString.toUpperCase().equals("MELLAN")) {
				return 1;
			}
			if(dummyString.toUpperCase().equals("SVÅR")) {
				return 2;
			}
			System.out.println("Du måste skriva lätt, mellan eller svår");
		}
	}
	
	/**
	 * Välkomnar spelaren
	 */
	public static void Welcome() {
		System.out.println("Detta spelet är hänga gubben. Du får ett svenskt ord och du ska gissa bokstav efter bokstav. Om du gissar rätt så visar bokstaven sig medans om du gissar fel så kommer du ett steg närmre att förlora.");
	}
	
	/**
	 * Testar om spelaren vill köra om spelet.
	 * @param numberOfGuessesLeft är antalet gissningar kvar.
	 * @return true om spelaren vill köra om spelet och false om inte.
	 */
	public static boolean TestIfPlayerWantRestart(int numberOfGuessesLeft) {
        Scanner input = new Scanner(System.in);
        
        if(numberOfGuessesLeft == 0) {
            System.out.println("Du förlorade");
        }
        else {
            System.out.println("Du vann!");
        }
        System.out.println("vill du köra igen?");
        
        while(true) {
	        String dummyString = input.nextLine().toUpperCase();
	       
	        if(dummyString.equals("JA")) {
	            return true;
	        }
	        else if(dummyString.equals("NEJ")) {
	        	return false;
	        }
	        System.out.println("Du behöver skriva ja eller nej");
        }
    }
    
	/**
	 * Testar om bokstaven spelaren gissar har blivit gissad på innan.
	 * @param guessedLetter är bokstaven spelaren gissade på.
	 * @return true om bokstaven har blivit gissad på innan och false om inte.
	 */
    public static boolean TestIfLetterBeenGuessedBefore(char guessedLetter) {
        for (int i = 0; i < guessedLetters.size(); i++) {
        	if(guessedLetters.get(i) == guessedLetter) {
            	return true;
            }
		}
        return false;
    }
	
    /**
     * Skriver ut hänga gubben ascii displayen.
     * @param numberOfGuessesLeft är antalet gissningar spelaren har kvar.
     */
	public static void AsciiAndWordDisplay(int numberOfGuessesLeft) {
        System.out.println(" +---+");
        System.out.println(" |   |");

        //Denna while loop har jag för att man ska kunna hoppa ur när man har hittat rätt tal så man inte behöver testa mer än nödvändigt.
        while(true) {
            if(numberOfGuessesLeft == 5) {
                System.out.println("     |");
                System.out.println("     |");
                System.out.println("     |");
                System.out.println("     |");
                break;
            }

            System.out.println(" O   |");
            if(numberOfGuessesLeft == 4) {
                System.out.println(" |   |");
            }
            else if(numberOfGuessesLeft == 3) {
                System.out.println("V|   |");
            }
            if(numberOfGuessesLeft == 3 || numberOfGuessesLeft == 4) {
                System.out.println("     |");
                System.out.println("     |");
                break;
            }

            System.out.println("V|V  |");
            if(numberOfGuessesLeft == 2) {
                System.out.println("     |");
            }
            else if(numberOfGuessesLeft == 1) {
                System.out.println("I    |");
            }
            else if(numberOfGuessesLeft == 0) {
                System.out.println("I I  |");
            }
            System.out.println("     |");
            break;
        }
    }
}
